<?php
/**
 * *************************************************************************
 * *                     Drag & Drop Content                              **
 * *************************************************************************
 * @package blocks                                                        **
 * @subpackage dd_content                                                 **
 * @name Drag & Drop Content                                              **
 * @copyright oohoo.biz                                                   **
 * @link http://oohoo.biz                                                 **
 * @author Dustin Durand                                                  **
 * @license                                                               **
 * http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later               **
 * *************************************************************************
 * ************************************************************************ */


/**
 * Retrieves the admin settings DATA for the dd_content
 * 
 * This is not the whole config, just the object stored at the "data" key.
 * 
 */
function dd_content_get_admin_config() {
    
    //get global block config
    $admin_config = get_config('block_dd_content');//get config for dd_content
   
    //if config doesn't exist, or data isn't set = return empty array
    if (!$admin_config || !isset($admin_config->data))//no config, or not set data
        $config_datas = array();
    else
        //unseralize string to a php object containing config data
        $config_datas =  dd_content_deserialize($admin_config->data);
    
    return $config_datas;
}

/**
 * Adds configuration data to the given data object that isn't generated by the
 * edit form.
 * 
 * Ex: The orientation is saved in the config data, but isn't generated in the
 * instance edit form.
 * 
 */
function dd_content_add_non_standard_form_data($block, &$data) {
    $config = $block->config;//get instance config

    //if a config exists
    if ($config) {
        if (isset($config->orientation))//and orientation is set
            $data->orientation = $config->orientation;//add/update orientation in data object
    }
}

/**
 * 
 * @param object $data An object that will have filter default data loaded into it
 * @param array $config_datas The DATA section of the config object
 * @return $data
 */
function dd_content_create_mform_data($data, $config_datas) {
    
    //Setup object to load data
    if (empty($data->id)) {
        $data = new object();
        $data->id = null;

        //set array defaults
        $data->config_filter_name = array();
        $data->config_filter_mods = array();
        $data->config_filter_defaults = array();
    }
    
//for each filter that is saved
    $i = 0;
    foreach ($config_datas as $config_data) {
        $data->config_filter_name[$i] = $config_data->name; //add name for filter
        $data->config_filter_mods[$i] = $config_data->mods; //add mods for filter
        $data->config_filter_defaults[$i] = $config_data->default; //add default setting for filter
        $i++; //move onto next filter
    }
    //return updates data object
    return $data;
}

/**
 * In the case of the build in edit_forms (for the instance config), the form
 * requires all elements start with "_config". For the sake of maintainability,
 * we are using the same mform for both this edit form and our admin config form.
 * 
 * Therefore, since editform strips "config_" off the property names, this function
 * exists to get data elements (based on name) from either case.
 * ex: config_filter_name
 * 
 * Is returned as: config_filter_name in admin form and filter_name in edit_form
 * 
 * @param object $data submission data
 * @param string $element_name property to retrieve from submission data
 * @param bool $required should an exception be thrown if the element doesn't exist
 * @return string The value of the given element_name
 * @throws Exception
 */
function get_submitted_data_elements($data, $element_name, $required = true) { 
    
    //check if the full property exists: $element_name = config_X
    if(isset($data->$element_name)) {
        return $data->$element_name;
    } 
    
    //doesn't exist, so remove config_
    $element_name = str_replace("config_", "", $element_name);
    
    //check if the full property exists: $element_name = X
    if(isset($data->$element_name)) {
        return $data->$element_name;
    }
    
    //if its a required property throw general exception
    if($required)
        throw new Exception();
    
}

/**
 * Processes the submission data from either of our configuration forms and
 * generates a serialized data string of the resulting filter objects
 * 
 * @param object $data The submission data from either of our filter forms
 * @return string serialization of filter objects generated
 */
function dd_content_process_settings_form($data) {
    $data_array = array();//array of filters to be saved
    
        $count = get_submitted_data_elements($data, "config_filters_repeats");//number of filters in form
        $names = get_submitted_data_elements($data, "config_filter_name");//filter names as array
        $mods = get_submitted_data_elements($data, "config_filter_mods");//mods as array
        $defaults = get_submitted_data_elements($data, "config_filter_defaults");//defaults array
        $excludes = get_submitted_data_elements($data, "config_filter_remove", false);//defaults array
    
    $default_used = false;//only allow the first default
    
    //itterate through each filter and prepare to save
    for($i = 0; $i < $count; $i++) {
        $name = trim($names[$i]);//clean name
        
        if(isset($excludes[$i])) continue;//remove button pressed for this filter - remove it
        if(empty($name)) continue;//skip is no name
        if(!isset($mods[$i])) continue;//skip if no mod
        
        //create object for the filter
        $entry = new stdClass();
        $entry->name = $names[$i];//set name
        $entry->mods = $mods[$i];//set array of mods
        
        //if filter is to be set as default
        if($defaults[$i] == '1') {
            if($default_used == false)//no default exists
            {
                $default_used = true;//first default found
                $entry->default = true;  //save as default
            } else
               $entry->default = false;  //already have default -override to false
        } else {//not set as default
           $entry->default = false; 
        }
        
        //add filter to array to be saved
        array_push($data_array, $entry);
    }
    
    
    return dd_content_serialize($data_array); //convert to string 
}

/**
 * Standard method for serialization
 * 
 * @param object $data
 * @return string serialized version of $data object
 */
function dd_content_serialize($data) {
    return base64_encode(serialize($data));
}

/**
 * Standard method for deserialization
 * 
 * @param string $data serialized $data object
 * @return object
 */
function dd_content_deserialize($data) {
    return unserialize(base64_decode($data));
}

/**
 * Adds the required elements for filter config settings to a given mform.
 * 
 * @param moodleform $form
 * @param moodleform $mform internal object $this->_instance in moodle_form
 * @param int $count number of filters required
 */
function dd_content_setup_settings_form($form, &$mform, $count) {
    //Filters headerprint
        $mform->addElement('html', '<h2>' . get_string('admin_settings_filter_title', 'block_dd_content') . '</h2>');
        
        //get all mods names
        $names = get_module_types_names();
        
        //Repeated filter template
        $repeatarray=array();
        
        //header
        $repeatarray[] = $mform->createElement('header', '', get_string('filter','block_dd_content').' {no}');
        
        //name text
        $repeatarray[] = $mform->createElement('text', 'config_filter_name', get_string('name','block_dd_content'));
        
        //select containing all of the possible mods
        $select = $mform->createElement('select', 'config_filter_mods', get_string('modules_included','block_dd_content'), $names);
        $select->setMultiple(true);
         $repeatarray[] = $select;
        
        //is default checkbox - whether it is the one loaded by default
        $repeatarray[] = $mform->createElement('advcheckbox', 'config_filter_defaults', get_string('filter_is_default', 'block_dd_content'), '', array('group' => 1), array(0, 1));
       
        //remove button
        $repeatarray[] = $mform->createElement('submit', 'config_filter_remove', get_string('remove','block_dd_content'));
 
        //type sets
        $mform->setType('config_filter_name', PARAM_TEXT);
        $mform->setType('config_mods', PARAM_RAW);
        $mform->setType('config_filter_remove', PARAM_TEXT);
        
        //always have 1 more element than the current amount saved
        $repeatno=$count;
        $repeatno += 1;
 
        //no repeat options
        $repeateloptions = array();
 
        //add repeated elements
        $form->repeat_elements($repeatarray, $repeatno,
                    $repeateloptions, 'config_filters_repeats', 'option_add_filters', 1);
        
       //add submit button
        $mform->addElement('submit', 'config_save', get_string("save", "block_dd_content"));
        $mform->addElement('hidden', 'config_is_form_submission', "1");
        $mform->setType('config_is_form_submission', PARAM_INT);
}

    /**
     * Loads jQuery based on if its moodle 2.5 or pre-moodle 2.5
     * @global moodle_page $PAGE
     * 
     */
    function load_jQuery() {
        global $PAGE, $DB, $COURSE;

        dd_content_inline_js(); //some inline JS for php info

        if (moodle_major_version() >= '2.5') {//use moodle's built in if > moodle 2.5
            $PAGE->requires->jquery();
            $PAGE->requires->jquery_plugin('migrate');
            $PAGE->requires->jquery_plugin('ui');
            $PAGE->requires->jquery_plugin('ui-css');
        } else {//need to include jquery if pre moodle 2.5
            //More Ugly Stuff to make it slightly more 2.4 friendly with course menu format...   
            if ($COURSE->format != 'course_menu') {
                $PAGE->requires->js("/blocks/dd_content/jquery/core/jquery-ui.min.js");
                $PAGE->requires->css("/blocks/dd_content/jquery/core/themes/base/jquery.ui.all.css");
            }
        }

        $PAGE->requires->js("/blocks/dd_content/dd_content.js");
    }
    
        /**
     * This method outputs a set of server-side information for use by the browser side
     * scripts.
     * 
     * @global object $COURSE
     * @global object $CFG
     */
    function dd_content_inline_js() {
        global $COURSE, $CFG;
        
        echo "<script>";
           //avoid possible overwriting
           echo "if(typeof dd_content_php == 'undefined') var dd_content_php = new Array();"; //global js object
        
           //server/course info
           echo "dd_content_php['course'] = $COURSE->id ;"; //course id
           echo "dd_content_php['wwwroot'] = '$CFG->wwwroot';"; //server address
           
           //LANGS
           echo "dd_content_php['invalid_section_id'] = '".get_string('invalid_section_id','block_dd_content')."';"; 
           echo "dd_content_php['ajax'] = '$CFG->wwwroot/blocks/dd_content/ajax_controller.php';";
           //echo "dd_content_php['orientation'] = '".$this->get_menu_oritentation()."';";
           echo "dd_content_php['search_empty'] = '".get_string('editing_block_search','block_dd_content')."';";
           
           //select 2
            echo "dd_content_php['select2_no_matches'] = '" . get_string('select2_no_matches', 'block_dd_content') . "';";
            echo "dd_content_php['select2_plural_extension'] = '" . get_string('select2_plural_extension', 'block_dd_content') . "';";
            echo "dd_content_php['select2_enter'] = '" . get_string('select2_enter', 'block_dd_content') . "';";
            echo "dd_content_php['select2_additional_chars'] = '" . get_string('select2_additional_chars', 'block_dd_content') . "';";
            echo "dd_content_php['select2_remove_chars'] = '" . get_string('select2_remove_chars', 'block_dd_content') . "';";
            echo "dd_content_php['select2_chars'] = '" . get_string('select2_chars', 'block_dd_content') . "';";
            echo "dd_content_php['select2_only_select'] = '" . get_string('select2_only_select', 'block_dd_content') . "';";
            echo "dd_content_php['select2_item'] = '" . get_string('select2_item', 'block_dd_content') . "';";
            echo "dd_content_php['select2_loading_more'] = '" . get_string('select2_loading_more', 'block_dd_content') . "';";
            echo "dd_content_php['select2_searching'] = '" . get_string('select2_searching', 'block_dd_content') . "';";
           
            echo "dd_content_php['filter_content_placeholder'] = '" . get_string('filter_content_placeholder', 'block_dd_content') . "';";
            
            
           echo "</script>";
    }
    
    /**
     * Loads the JS that is specific to the config forms
     * 
     * @global moodle_page $PAGE
     */
    function load_config_forms_js() {
        global $PAGE;
        load_jQuery();
        $PAGE->requires->css('/blocks/dd_content/jquery/plugins/select2/select2.css');
        $PAGE->requires->js('/blocks/dd_content/jquery/plugins/select2/select2.js');
        $PAGE->requires->js('/blocks/dd_content/jquery/plugins/select2/select2_locale_moodle.js');
        $PAGE->requires->js('/blocks/dd_content/config_forms.js');
    }

?>
